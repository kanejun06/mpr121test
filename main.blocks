<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="xRRgvHNlG#rZ^u`HECiY" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="2,T=.60}rs|w:@L))wO4"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace MPR121 {" line1="    // ====== I2C / レジスタ定義 ======" line2="    let I2C_ADDR = 0x5A" line3="    const REG_TOUCH_STATUS_L = 0x00" line4="    const REG_TOUCH_STATUS_H = 0x01" line5="    const REG_ECR = 0x5E" line6="" line7="    // Per-electrode threshold registers" line8="    // ELE0: Touch=0x41, Release=0x42, 以後 2ずつ進む" line9="    function REG_TTH(key: number) { return 0x41 + key * 2 } // touch threshold" line10="    function REG_RTH(key: number) { return 0x42 + key * 2 } // release threshold" line11="" line12="    // ====== イベント定義 ======" line13="    const EVT_SRC = 0xA121" line14="    const EVT_PRESSED = 1" line15="    const EVT_RELEASED = 2" line16="    const EVT_ANY_PRESSED = 3" line17="    const EVT_ANY_RELEASED = 4" line18="" line19="    // ====== 状態 ======" line20="    let _started = false" line21="    let _prevMask = 0" line22="    let _pollMs = 20 // デフォルト 20ms" line23="    let _running = false // ECRの有効状態を記録" line24="" line25="    // ====== enum ======" line26="    export enum Key {" line27="        //% block=&quot;T0&quot;" line28="        T0 = 0, // … T0〜T11" line29="        //% block=&quot;T1&quot;" line30="        T1," line31="        //% block=&quot;T2&quot;" line32="        T2," line33="        //% block=&quot;T3&quot;" line34="        T3," line35="        //% block=&quot;T4&quot;" line36="        T4," line37="        //% block=&quot;T5&quot;" line38="        T5," line39="        //% block=&quot;T6&quot;" line40="        T6," line41="        //% block=&quot;T7&quot;" line42="        T7," line43="        //% block=&quot;T8&quot;" line44="        T8," line45="        //% block=&quot;T9&quot;" line46="        T9," line47="        //% block=&quot;T10&quot;" line48="        T10," line49="        //% block=&quot;T11&quot;" line50="        T11" line51="    }" line52="" line53="    export enum I2CAddress {" line54="        //% block=&quot;0x5A (default)&quot;" line55="        Addr_0x5A = 0x5A," line56="        //% block=&quot;0x5B&quot;" line57="        Addr_0x5B = 0x5B," line58="        //% block=&quot;0x5C&quot;" line59="        Addr_0x5C = 0x5C," line60="        //% block=&quot;0x5D&quot;" line61="        Addr_0x5D = 0x5D" line62="    }" line63="" line64="    // ====== 低レベル I2C ======" line65="    function writeReg(reg: number, val: number) {" line66="        const buf = pins.createBuffer(2)" line67="        buf.setNumber(NumberFormat.UInt8LE, 0, reg)" line68="        buf.setNumber(NumberFormat.UInt8LE, 1, val &amp; 0xFF)" line69="        pins.i2cWriteBuffer(I2C_ADDR, buf, false)" line70="    }" line71="" line72="    function readRegU8(reg: number): number {" line73="        pins.i2cWriteNumber(I2C_ADDR, reg, NumberFormat.UInt8BE, true)" line74="        return pins.i2cReadNumber(I2C_ADDR, NumberFormat.UInt8BE, false) &amp; 0xFF" line75="    }" line76="" line77="    function readTouchMask(): number {" line78="        const l = readRegU8(REG_TOUCH_STATUS_L)" line79="        const h = readRegU8(REG_TOUCH_STATUS_H)" line80="        return ((h &lt;&lt; 8) | l) &amp; 0x0FFF // 12bit" line81="    }" line82="" line83="    // ====== ECR（有効/停止）制御 ======" line84="    function stopRun() {" line85="        if (_running) {" line86="            writeReg(REG_ECR, 0x00) // 停止" line87="            basic.pause(5)" line88="            _running = false" line89="        }" line90="    }" line91="" line92="    function startRun() {" line93="        if (!_running) {" line94="            // CL=0, ELEPROX=0, ELE=0x0F(=12ch) → 0x8F" line95="            writeReg(REG_ECR, 0x8F)" line96="            basic.pause(5)" line97="            _running = true" line98="        }" line99="    }" line100="" line101="    // 安全適用：一時停止→処理→再開" line102="    function applySafely(fn: () =&gt; void) {" line103="        stopRun()" line104="        fn()" line105="        startRun()" line106="    }" line107="" line108="    // ====== 内部：ポーリング開始 ======" line109="    function startIfNeeded() {" line110="        if (_started) return" line111="        _started = true" line112="" line113="        // 一旦停止→起動（初期化）" line114="        stopRun()" line115="        startRun()" line116="" line117="        control.inBackground(function () {" line118="            while (true) {" line119="                const mask = readTouchMask()" line120="                const diff = mask ^ _prevMask" line121="                if (diff) {" line122="                    for (let k = 0; k &lt; 12; k++) {" line123="                        const bit = 1 &lt;&lt; k" line124="                        if (diff &amp; bit) {" line125="                            const pressed = (mask &amp; bit) !== 0" line126="                            if (pressed) {" line127="                                control.raiseEvent(EVT_SRC, (k &lt;&lt; 4) | EVT_PRESSED)" line128="                                control.raiseEvent(EVT_SRC, EVT_ANY_PRESSED)" line129="                            } else {" line130="                                control.raiseEvent(EVT_SRC, (k &lt;&lt; 4) | EVT_RELEASED)" line131="                                control.raiseEvent(EVT_SRC, EVT_ANY_RELEASED)" line132="                            }" line133="                        }" line134="                    }" line135="                    _prevMask = mask" line136="                }" line137="                basic.pause(_pollMs)" line138="            }" line139="        })" line140="    }" line141="" line142="    // ====== 公開ブロック ======" line143="" line144="    /**" line145="     * MPR121 の I2C アドレスを設定します（既定 0x5A）。" line146="     */" line147="    //% blockId=mpr121_set_addr block=&quot;MPR121 の I2C アドレスを %addr に設定する&quot;" line148="    //% weight=95" line149="    export function setAddress(addr: I2CAddress) {" line150="        I2C_ADDR = addr as number" line151="    }" line152="" line153="    /**" line154="     * ポーリング周期（ミリ秒）を設定します（デフォルト 20ms）。" line155="     */" line156="    //% blockId=mpr121_set_poll block=&quot;MPR121 のポーリング周期を %ms ミリ秒にする&quot;" line157="    //% ms.min=5 ms.max=200 ms.defl=20" line158="    //% weight=94" line159="    export function setPollingInterval(ms: number) {" line160="        _pollMs = Math.max(5, Math.min(200, ms | 0))" line161="    }" line162="" line163="    /**" line164="     * 任意のタイミングで12ビットのタッチ状態を取得します（1=タッチ）。" line165="     */" line166="    //% blockId=mpr121_read_mask block=&quot;MPR121 のタッチ状態(12bit)を読む&quot;" line167="    //% weight=80" line168="    export function readTouchStatus(): number {" line169="        startIfNeeded()" line170="        return readTouchMask()" line171="    }" line172="" line173="    /**" line174="     * 特定キーが押されているか（連続監視にも利用可）" line175="     */" line176="    //% blockId=mpr121_is_touched block=&quot;MPR121 でキー %key がタッチ中か&quot;" line177="    //% weight=79" line178="    export function isTouched(key: Key): boolean {" line179="        startIfNeeded()" line180="        return (readTouchMask() &amp; (1 &lt;&lt; key)) !== 0" line181="    }" line182="" line183="    /**" line184="     * 指定キーが「押された」時に実行（立ち上がりエッジ）" line185="     */" line186="    //% blockId=mpr121_on_pressed block=&quot;MPR121 でキー %key が押されたとき&quot;" line187="    //% weight=70" line188="    export function onPressed(key: Key, handler: () =&gt; void) {" line189="        startIfNeeded()" line190="        const value = ((key as number) &lt;&lt; 4) | EVT_PRESSED" line191="        control.onEvent(EVT_SRC, value, handler)" line192="    }" line193="" line194="    /**" line195="     * 指定キーが「離された」時に実行（立ち下がりエッジ）" line196="     */" line197="    //% blockId=mpr121_on_released block=&quot;MPR121 でキー %key が離されたとき&quot;" line198="    //% weight=69" line199="    export function onReleased(key: Key, handler: () =&gt; void) {" line200="        startIfNeeded()" line201="        const value2 = ((key as number) &lt;&lt; 4) | EVT_RELEASED" line202="        control.onEvent(EVT_SRC, value2, handler)" line203="    }" line204="" line205="    /**" line206="     * いずれかのキーが押された時に実行" line207="     */" line208="    //% blockId=mpr121_on_any_pressed block=&quot;MPR121 でどれかのキーが押されたとき&quot;" line209="    //% weight=60" line210="    export function onAnyPressed(handler: () =&gt; void) {" line211="        startIfNeeded()" line212="        control.onEvent(EVT_SRC, EVT_ANY_PRESSED, handler)" line213="    }" line214="" line215="    /**" line216="     * いずれかのキーが離された時に実行" line217="     */" line218="    //% blockId=mpr121_on_any_released block=&quot;MPR121 でどれかのキーが離されたとき&quot;" line219="    //% weight=59" line220="    export function onAnyReleased(handler: () =&gt; void) {" line221="        startIfNeeded()" line222="        control.onEvent(EVT_SRC, EVT_ANY_RELEASED, handler)" line223="    }" line224="" line225="    // ====== ★ 追加：閾値設定ブロック ======" line226="" line227="    /**" line228="     * 指定キーのタッチ/リリース閾値を設定します（0〜255）。" line229="     * 一般に touch &gt; release（触れた時の方を大きく）にします。" line230="     */" line231="    //% blockId=mpr121_set_threshold block=&quot;MPR121 でキー %key の閾値を | touch %touch | release %release に設定&quot;" line232="    //% touch.min=0 touch.max=255 touch.defl=12" line233="    //% release.min=0 release.max=255 release.defl=6" line234="    //% weight=88" line235="    export function setThreshold(key: Key, touch: number, release: number) {" line236="        const m = key as number" line237="        const t = Math.max(0, Math.min(255, touch | 0))" line238="        const r = Math.max(0, Math.min(255, release | 0))" line239="        applySafely(() =&gt; {" line240="            writeReg(REG_TTH(m), t)" line241="            writeReg(REG_RTH(m), r)" line242="        })" line243="    }" line244="" line245="    /**" line246="     * 全キー（T0〜T11）のタッチ/リリース閾値を一括設定します（0〜255）。" line247="     */" line248="    //% blockId=mpr121_set_all_thresholds block=&quot;MPR121 ですべてのキーの閾値を | touch %touch | release %release に一括設定&quot;" line249="    //% touch.min=0 touch.max=255 touch.defl=12" line250="    //% release.min=0 release.max=255 release.defl=6" line251="    //% weight=87" line252="    export function setAllThresholds(touch: number, release: number) {" line253="        const u = Math.max(0, Math.min(255, touch | 0))" line254="        const s = Math.max(0, Math.min(255, release | 0))" line255="        applySafely(() =&gt; {" line256="            for (let n = 0; n &lt; 12; n++) {" line257="                writeReg(REG_TTH(n), u)" line258="                writeReg(REG_RTH(n), s)" line259="            }" line260="        })" line261="    }" line262="}" numlines="263"></mutation></block></statement></block></xml>